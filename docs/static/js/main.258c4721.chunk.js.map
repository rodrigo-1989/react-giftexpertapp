{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategorie","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GiftExpertApp","categories","setCategories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,aAAqB,EACdC,mBAAS,IADK,mBACzCC,EADyC,KAC9BC,EAD8B,KAYhD,OACI,sBAAMC,SAPU,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAa,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACpCN,EAAe,MAGnB,SACI,uBAAOO,KAAK,OACRC,MAAST,EACTU,SAbc,SAACP,GACpBF,EAAeE,EAAEQ,OAAOF,a,+BCPrBG,EAAO,uCAAE,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAWH,GAD9C,+DAGGI,MAAOF,GAHV,cAGTG,EAHS,gBAIQA,EAAKC,OAJb,uBAIPC,EAJO,EAIPA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAaRM,GAbQ,4CAAF,sDCERO,EAAe,SAAC,GAAuB,EAApBJ,GAAqB,IAAlBC,EAAiB,EAAjBA,MAAMV,EAAW,EAAXA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAON,IACxB,kCAAMA,EAAN,WCFCO,EAAW,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEPa,ECHM,SAAEb,GAAa,IAAD,EAEdd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAgBxC,OATAC,qBAAU,WACFxB,EAASC,GAAWwB,MAAM,SAAAC,GACtBH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGtB,CAAEpB,IAEGqB,EDbyBK,CAAc1B,GAA/BO,KACX,OACI,qCACA,6BAAMP,IAEF,qBAAKgB,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAAqCA,GAAfA,EAAIC,aEXrCgB,EAAgB,WAAO,IAAD,EACIzC,mBAAS,CAAC,cADd,mBACxB0C,EADwB,KACbC,EADa,KAG/B,OACI,qCACI,+CACA,cAAC,EAAD,CAAa5C,aAAiB4C,IAC9B,uBAEA,6BAEQD,EAAWnB,KAAM,SAAAT,GAAQ,OAAK,cAAC,EAAD,CAEFA,SAAYA,GADJA,Y,MCXxD8B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.258c4721.chunk.js","sourcesContent":["import React,{ useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategorie  } ) => {\n    const [inputValue,setInputValue ]=useState(''); \n    \n    const handleInputChange = (e)=>{\n           setInputValue( e.target.value );      \n    }\n    const handleSubmit =(e) =>{\n        e.preventDefault();\n        if (inputValue.trim().length > 2){\n            setCategorie(cats => [inputValue,...cats]);\n            setInputValue( '' ); }\n    }\n    return (\n        <form onSubmit= { handleSubmit }>\n            <input type=\"text\"\n                value= { inputValue }\n                onChange= { handleInputChange }/>\n            \n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategorie: PropTypes.func.isRequired\n}\n","export  const getGifs =async ( category )=>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI (category)}&limit=10&api_key=c9A2RQRrsdvgnQ67MKlMcKzhTUt9sgK3`;\n\n        const resp =await fetch( url );\n        const { data } = await resp.json();\n        \n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n        return gifs;\n\n    }","import React from 'react'\n\nexport const GiftGridItem = ( { id,title,url } ) => {\n    \n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={ url } alt= { title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\n import { GiftGridItem } from './GiftGridItem';\n\nexport const GiftGrid = ({ category }) => { \n\n       const { data:images } =  useFetchGifs( category );\n    return (\n        <>\n        <h3>{ category }</h3>\n       \n            <div className=\"card-grid\"> \n                    {\n                    images.map( img =>(\n                        <GiftGridItem key = { img.id }  { ...img }/>\n                    ))\n                    }\n            </div>\n        </>\n    )\n}\n ","import { useState,useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs=( category )=>{\n\nconst [state, setState] = useState({\n    data:[],\n    loading:true\n});\n\nuseEffect(()=>{\n        getGifs( category ).then( imgs =>{\n            setState({\n                data:imgs,\n                loading:false \n            });\n        } )\n},[ category ]);\n\nreturn state;\n}","import React,{ useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GiftGrid } from './components/GiftGrid';\n\nexport const GiftExpertApp = () => {\n    const [categories,setCategories] = useState(['One piece']);\n     \n    return (\n        <>\n            <h2>GiftExpertApp</h2>\n            <AddCategory setCategorie = { setCategories } />\n            <hr/>\n            \n            <ol>\n                {\n                    categories.map(  category =>( <GiftGrid \n                                                key  ={ category }\n                                                category ={ category } />\n                    )) \n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './GiftExpertApp';\nimport './index.css';\n\nReactDOM.render(\n\n    <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}